import React, { Component } from 'react';
import { ValidatorForm, TextValidator } from 'react-material-ui-form-validator';
import { Button } from '@material-ui/core';
import Table from '@material-ui/core/Table';
import TableBody from '@material-ui/core/TableBody';
import TableCell from '@material-ui/core/TableCell';
import TableContainer from '@material-ui/core/TableContainer';
import TableHead from '@material-ui/core/TableHead';
import TableRow from '@material-ui/core/TableRow';
import Paper from '@material-ui/core/Paper';
import { createStyles, makeStyles, Theme } from '@material-ui/core/styles';
import InputLabel from '@material-ui/core/InputLabel';
import MenuItem from '@material-ui/core/MenuItem';
import FormHelperText from '@material-ui/core/FormHelperText';
import FormControl from '@material-ui/core/FormControl';
import Select from '@material-ui/core/Select';
import BOM from './BOM';

type AcceptedProps = {
    sessionToken: string,
}

interface FinishedState {
    fgName: [],
    fgSRP: number,
    fgCOGS: number,
    fgMakerPrice: number,  
    selectedId: number | null
}


export default class FinishedGood extends Component<AcceptedProps, FinishedState> {
    constructor(props: AcceptedProps) {
        super(props);
        this.state = {
            fgName: [],
            fgSRP: 0.0,
            fgCOGS: 0.0,
            fgMakerPrice: 0.0,
            selectedId: null
        }
    }
    componentDidMount(){
        this.getAllBOM()
    };
    componentDidUpdate(prev:AcceptedProps){
        if (prev.sessionToken !== this.props.sessionToken){
            this.getAllBOM()
        }
    }

getAllBOM = () => {
    if (this.props.sessionToken) {
        fetch("Http://localhost:3030/BOM/BOMlist", {
            method: "GET",
            headers: new Headers({
                "Content-Type": "application/json",
                Authorization: this.props.sessionToken,
            }),
        })
        .then((res) => res.json())
                .then((data) => {
                    this.setState({ fgName: data })
                })
                .catch((err) => console.log(err));
                console.log(this.state.fgName)
    }
}

  
handleSubmit = (e:any) => {
    e.preventDefault()
    fetch('http://localhost:3030/finshedGood/finishedGood', {
        method: 'POST',
        body: JSON.stringify({
            fGood:{
                fgName: this.state.fgName,
                fgSRP: this.state.fgSRP,
                fgCOGS: this.state.fgCOGS,
                fgMakerPrice: this.state.fgMakerPrice, 
            },
        }),
        headers: new Headers({
            'Content-Type': 'application/json'
        })

    }).then(
        (response) => response.json()
    ).then((data) => {
        // this.props.sessionToken(data.sessionToken);
    })
};

handlerfgNameChange = (event: any) => {
    const fgName = event.target.value;
    this.setState({ fgName: fgName })
};
handlefgCSRPChange = (event: any) => {
    const fgSRP = event.target.value;
    this.setState({ fgSRP: fgSRP})
};
handlefgCOGSChange = (event: any) => {
    const fgCOGS = event.target.value;
    this.setState({ fgCOGS: fgCOGS})
};
handlefgMakerPriceChange = (event: any) => {
    const fgMakerPrice = event.target.value;
    this.setState({ fgMakerPrice: fgMakerPrice})
};

render() {
    return (
        <div>
            <h2>Finished Good</h2>
           
            <ValidatorForm
                style={{
                    marginLeft: 'auto',
                    marginRight: 'auto',
                    width: '30%',
                    display: 'block',
                    backgroundColor: '#FFFFFF',
                }}
                ref='form'
                onSubmit={this.handleSubmit}
                onError={(errors) => console.log(errors)}
            >
                
                <FormControl >
                        <InputLabel id="demo-simple-select-label">Raw Good</InputLabel>
                        <Select
                            labelId="demo-simple-select-label"
                            id="demo-simple-select"
                            value={this.state.selectedId}
                            onChange={this.handleBOMrawGoodChange}>
                            {this.state.BOMrawGood.map((rawg: any) => (
                                <MenuItem value={rawg.id}>
                                    {rawg.rgName}
                                </MenuItem>
                            ))}
                        </Select>
                    </FormControl>
                
                
                
                <TextValidator
                    label='Raw Material Name'
                    hover= 'TExt EX'
                    onChange={(e) => this.handlergNameChange(e)}
                    name='rgName'
                    value={this.state.rgName}
                    validators={['required']}
                    errorMessages={[
                        'Required, names should be unique but easily remembered',
                        
                    ]}
                    autoComplete='off'
                >
                </TextValidator>
                <TextValidator
                    label='Unit of Measure'
                    onChange={this.handlergUOMChange}
                    name='Unit of Measure'
                    value={this.state.rgUOM}
                    type='string'
                    validators={[]}
                    errorMessages={[]}>
                </TextValidator>
                <TextValidator
                    label='Quantity'
                    onChange={this.handlergQtyChange}
                    name='Quantity'
                    value={this.state.rgQty}
                    type='number'
                    validators={['required']}
                    errorMessages={[
                        'username not available',
                        'this field is required'
                    ]} 
                // autoComplete='off'
                >
                </TextValidator>
                <TextValidator
                    label='Cost per Unit'
                    onChange={this.handlergCostChange}
                    name='Cost'
                    value={this.state.rgCost}
                    type='number'
                    validators={['required']}
                    errorMessages={[
                        // 'password should be more than 5 letters',
                        'this field is required',
                    ]}>
                </TextValidator>
                <TextValidator
                    label='Vendor'
                    onChange={this.handlergVendorChange}
                    name='Cost'
                    value={this.state.rgVendor}
                    type='string'
                    validators={['required']}
                    errorMessages={[
                        // 'password should be more than 5 letters',
                        'this field is required',
                    ]}>
                </TextValidator>
                <br />
                <Button
                    color="primary"
                    variant="contained"
                    type="submit"
                >Submit
                </Button> 
            </ValidatorForm>
            {console.log(this.state.rgName)}
        </div>

    );



  


}}